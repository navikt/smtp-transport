/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/8.1.1/userguide/multi_project_builds.html
 */

dependencyResolutionManagement {

    versionCatalogs {
        create("libs") {
            version("arrow", "2.0.1")
            version("flyway", "9.16.3")
            version("hikari", "5.0.1")
            version("suspendapp", "0.5.0")
            version("ktor", "3.0.3")
            version("token-validation-ktor", "5.0.15")
            version("jakarta-mail", "2.1.2")
            version("eclipse-angus", "2.0.2")
            version("hoplite", "2.8.2")
            version("kotlin-kafka", "0.4.0")
            version("sqldelight", "2.0.2")
            version("postgres", "42.7.4")
            version("vault-jdbc", "1.3.10")
            version("prometheus", "1.12.4")
            version("logback", "1.4.11")
            version("logstash", "7.4")

            library("arrow-core", "io.arrow-kt", "arrow-core").versionRef("arrow")
            library("arrow-functions", "io.arrow-kt", "arrow-functions").versionRef("arrow")
            library("arrow-fx-coroutines", "io.arrow-kt", "arrow-fx-coroutines").versionRef("arrow")
            library("arrow-resilience", "io.arrow-kt", "arrow-resilience").versionRef("arrow")
            library("arrow-suspendapp", "io.arrow-kt", "suspendapp").versionRef("suspendapp")
            library("arrow-suspendapp-ktor", "io.arrow-kt", "suspendapp-ktor").versionRef("suspendapp")

            library("hoplite-core", "com.sksamuel.hoplite", "hoplite-core").versionRef("hoplite")
            library("hoplite-hocon", "com.sksamuel.hoplite", "hoplite-hocon").versionRef("hoplite")

            library("kotlin-kafka", "io.github.nomisrev", "kotlin-kafka").versionRef("kotlin-kafka")

            library("ktor-server-core", "io.ktor", "ktor-server-core").versionRef("ktor")
            library("ktor-server-netty", "io.ktor", "ktor-server-netty").versionRef("ktor")
            library("ktor-server-call-logging-jvm", "io.ktor", "ktor-server-call-logging-jvm").versionRef("ktor")
            library("ktor-server-content-negotiation", "io.ktor", "ktor-server-content-negotiation").versionRef("ktor")
            library("ktor-client-content-negotiation", "io.ktor", "ktor-client-content-negotiation").versionRef("ktor")
            library("ktor-serialization-kotlinx-json", "io.ktor", "ktor-serialization-kotlinx-json").versionRef("ktor")
            library("ktor-client-core", "io.ktor", "ktor-client-core").versionRef("ktor")
            library("ktor-client-cio", "io.ktor", "ktor-client-cio").versionRef("ktor")
            library("ktor-client-auth", "io.ktor", "ktor-client-auth").versionRef("ktor")

            library("ktor-server-metrics-micrometer", "io.ktor", "ktor-server-metrics-micrometer").versionRef("ktor")
            library("micrometer-registry-prometheus", "io.micrometer", "micrometer-registry-prometheus").versionRef("prometheus")

            library("logback-classic", "ch.qos.logback", "logback-classic").versionRef("logback")
            library("logback-logstash", "net.logstash.logback", "logstash-logback-encoder").versionRef("logstash")

            library("sqldelight-jdbc-driver", "app.cash.sqldelight", "jdbc-driver").versionRef("sqldelight")
            library("sqldelight-postgresql-dialect", "app.cash.sqldelight", "postgresql-dialect").versionRef("sqldelight")
            library("sqldelight-coroutines-extensions", "app.cash.sqldelight", "coroutines-extensions").versionRef("sqldelight")
            library("sqldelight-primitive-adapters", "app.cash.sqldelight", "primitive-adapters").versionRef("sqldelight")

            library("postgresql", "org.postgresql", "postgresql").versionRef("postgres")
            library("vault-jdbc", "no.nav", "vault-jdbc").versionRef("vault-jdbc")
            library("hikari", "com.zaxxer", "HikariCP").versionRef("hikari")

            library("ktor-server-auth-jvm", "io.ktor", "ktor-server-auth-jvm").versionRef("ktor")
            library("token-validation-ktor-v3", "no.nav.security", "token-validation-ktor-v3").versionRef("token-validation-ktor")
            library("flyway-core", "org.flywaydb", "flyway-core").versionRef("flyway")

            library("jakarta-mail-api", "jakarta.mail", "jakarta.mail-api").versionRef("jakarta-mail")
            library("eclipse-angus", "org.eclipse.angus", "jakarta.mail").versionRef("eclipse-angus")

            bundle("prometheus", listOf("ktor-server-metrics-micrometer", "micrometer-registry-prometheus"))
            bundle("jakarta-mail", listOf("jakarta-mail-api", "eclipse-angus"))
            bundle("logging", listOf("logback-classic", "logback-logstash"))
        }

        create("testLibs") {
            version("arrow", "1.2.4")
            version("testPostgres", "1.18.0")
            version("ktor-server-test", "3.0.3")
            version("kotest", "5.9.1")
            version("mock-oauth2", "2.1.2")
            version("testcontainers", "1.18.1")
            version("kotest-extensions", "2.0.2")
            version("greenmail", "2.1.0-alpha-3")
            version("postgres", "42.7.4")
            version("turbine", "1.1.0") // Nedgradert fra 1.2.0 pga avhengigheten til
            //                             kotlinx-coroutines-core-jvm:1.9.0 som gj√∏r at SmtpTransportIntegrationTest.kt
            //                             feiler med NoSuchMethodError for operasjon
            //                             LockFreeLinkedListHead.addLast(kotlinx.coroutines.internal.LockFreeLinkedListNode)
            library("greenmail", "com.icegreen", "greenmail").versionRef("greenmail")
            library("greenmail-junit5", "com.icegreen", "greenmail-junit5").versionRef("greenmail")

            library("ktor-server-test-host", "io.ktor", "ktor-server-test-host").versionRef("ktor-server-test")
            library("mock-oauth2-server", "no.nav.security", "mock-oauth2-server").versionRef("mock-oauth2")

            library("kotest-runner-junit5", "io.kotest", "kotest-runner-junit5").versionRef("kotest")
            library("kotest-framework-datatest", "io.kotest", "kotest-framework-datatest").versionRef("kotest")
            library("kotest-extensions-testcontainers", "io.kotest.extensions", "kotest-extensions-testcontainers").versionRef("kotest-extensions")
            library("kotest-extensions-testcontainers-kafka", "io.kotest.extensions", "kotest-extensions-testcontainers-kafka").versionRef("kotest-extensions")

            library("kotest-assertions-arrow", "io.kotest.extensions", "kotest-assertions-arrow").versionRef("arrow")

            library("testcontainers", "org.testcontainers", "testcontainers").versionRef("testcontainers")
            library("testcontainers-kafka", "org.testcontainers", "kafka").versionRef("testcontainers")
            library("testcontainers-postgresql", "org.testcontainers", "postgresql").versionRef("testcontainers")

            library("postgresql", "org.postgresql", "postgresql").versionRef("postgres")

            library("turbine", "app.cash.turbine", "turbine").versionRef("turbine")

            bundle("greenmail", listOf("greenmail", "greenmail-junit5"))
            bundle("kotest", listOf("kotest-runner-junit5", "kotest-framework-datatest"))
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = "Nav token-support"
            url = uri("https://maven.pkg.github.com/navikt/token-support")
            credentials {
                username = "token"
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "Mock OAUTH2 server"
            url = uri("https://maven.pkg.github.com/navikt/mock-oauth2-server")
            credentials {
                username = "token"
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

rootProject.name = "smtp-transport"
